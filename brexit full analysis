# Store file in your working directory
# and then read into a data frame. 

file_data <- read.csv("data_brexit_referendum.csv")
head(file_data)

#What data type is this file?
class(file_data)

# Lets look at the structure of the file
str(file_data)

# --------------------------------------------------------------------------------------
# Dealing with missing data
# --------------------------------------------------------------------------------------

# The original data has missing values
# represented by the number "-1"
# We need to search for these and replace them

# Check for values in "Leave" column where
# vlaue = -1
sum(file_data$Leave[file_data$Leave == -1])

# replace this with NA
file_data$Leave[file_data$Leave == -1] <- NA

# Verify that the replace happened
sum(file_data$Leave[file_data$Leave == -1])

# View the records with NA
na_records <- file_data[!complete.cases(file_data),]
na_records

# Same count as when values were -1
nrow(na_records)


library(mice)
# 15 records have missing NI address
# 10 have missing type
md.pattern(file_data)

library(VIM)

# Looks like the missing values are all in this 1 column
# for "Leave". We're not going to use it for now
# so we'll leave it as it is
missing_values <- aggr(file_data, prop = FALSE, numbers = TRUE)

# --------------------------------------------------------------------------------------
# Describing the brexit data
# --------------------------------------------------------------------------------------

# Lets look at the proportion of voters who
# are in favour of leaving the E.U.
# I'm creating a new variable to store this information in
# The focus of this dataset is brexit voters and their
# various attributes

file_data$Proportion <- file_data$Leave / file_data$NVotes
file_data$Proportion

# Store remain or leave in the Vote variable
file_data$Vote[file_data$Proportion <= 0.5] <- "Remain"
file_data$Vote[file_data$Proportion > 0.5] <- "Leave"
file_data$Vote

attach(file_data)
# Note that we still need to refer to the full path to the variable for
# part of the statement

# Need to convert to character from factor before we can convert the variable

file_data$RegionName <- as.character(RegionName)
str(file_data)
file_data$RegionName[RegionName == "London"] <- "L" # Check that this has happened
file_data$RegionName[RegionName == "North West"] <- "NW" 
file_data$RegionName[RegionName == "North East"] <- "NE" 
file_data$RegionName[RegionName == "South West"] <- "SW" 
file_data$RegionName[RegionName == "South East"] <- "SE" 
file_data$RegionName[RegionName == "East Midlands"] <- "EM" 
file_data$RegionName[RegionName == "West Midlands"] <- "WM" 
file_data$RegionName[RegionName == "East of England"] <- "EE" 
file_data$RegionName[RegionName == "Yorkshire and The Humber"] <- "Y" 

# Now we have a new variable of interest called proportion
# and we will now focus on this variable

# Lets view the summary of the data

# We can see that this shows relevant summaries of the data
# and it is tailored for each data type
summary(file_data)

# We're not able to directly reference this data because some is non-numeric
# and does not contai nwhat we want to view such as minimum, first quartile, median, mean, third quartile
# but we can use sapply() and check whether each data variable is a numeric variable or not
# eg to check whether proportion is a numeric value or not
is.numeric(file_data$Proportion)
is.numeric(file_data$RegionName)

# Use double-tab for structure of sapply()
numeric_variable_list <- sapply(file_data, is.numeric)
numeric_variable_list

# We can use this logic to create a subset of the data
numerical_data <- file_data[numeric_variable_list]
colnames(numerical_data)

# Remove the ID field as it has no meaning
numeric_variable_list["ID"] <- FALSE

# Then remove this again from the main file_data dataset
numerical_data <- file_data[numeric_variable_list]
colnames(numerical_data)

# We can use the lapply() function to return a named list
# where each list member has a corresponding name
lapply(numerical_data, summary)

?cbind()
# cbind() combines objects by rows and columns
# so we can use this function to create a dataset
# of the lapply() output

# do.call() function will allow us to 
# apply the cbind() to each element generated by lapply()
?do.call
# do.call(what, args, quote = FALSE, envir = parent.frame())
numerical_summary <- do.call(cbind, lapply(numerical_data, summary))

# Error message shows additional ine - caused by NA's
# We could drop NA's but that will only fix this one issue
# Instead we need to go back to the source and drop the NA's

file_data <- file_data[complete.cases(file_data),]
numerical_data <- file_data[numeric_variable_list]
numerical_summary <- do.call(cbind, lapply(numerical_data, summary))
numerical_summary

# We can do a swap with summary values as columns and variables as rows 
# then we use rbind()
alt_numerical_summary <-  do.call(rbind, lapply(numerical_data, summary))
alt_numerical_summary

# Now we can apply some computations
# such as finding range between wards with the least and most proportions of votes in
# favour of leaving (0.6681), which may be useful to interpret the big difference among the
# types of wards we may find in the UK. If we want to know which wards are being used to
# get to this result, we can search for the wards with the least and most proportion of votes

# We can use this data to show specific values such as 
# the max proportion value - max percent of those who voted to leave
# prop = leave / no of votes in ward
numerical_summary["Max.", "Proportion"]

# And the min proportion value can show us 
numerical_summary["Min.", "Proportion"]

numerical_summary["Max.", "Proportion"] - numerical_summary["Min.", "Proportion"]

# Lets look at values of those who wanted to leave and stay
display_variables <- c("NoQuals", "Proportion", "AdultMeanAge", "L4Quals_plus", "RegionName")

# Values show that those with mean age of 46.9 and 20% no qualifications
# and 27.3 with level 4 quals (degree and above) voted to leave
file_data[which.max(file_data$Proportion), display_variables]

# Those who wanted to stay were younger with better qualifications
file_data[which.min(file_data$Proportion), display_variables]

table(file_data$RegionName)

?prop.table
# table value expressed as fractions
prop.table(table(file_data$RegionName))

# --------------------------------------------------------------------------------------
# Plotting values for initial comparisons
# --------------------------------------------------------------------------------------

barplot(height = prop.table(table(file_data$RegionName)),
        main = "Vote proportion by Region", 
        ylab = "Frequency", 
        xlab = "Region",
        col = "white")

# chart where each point Each point represents a ward
# observation, and it shows the proportion of Leave votes for each ward, arranged in
# vertical lines corresponding to RegionName and coloured by the proportion of white
# population for each ward. As you can see, we have another interesting finding; it seems that
# the more diversified a ward's population is (seen in the darker points), the more likely it is
# for the ward to vote in favour of remaining in the EU (a lower Proportion value).

# Creates the plot
install.packages("ggplot2")
# Colour each chart point witha colour palette
install.packages("viridis")
library(ggplot2)
library(viridis)

plot <- ggplot(file_data, aes(x = RegionName, y = Proportion, color = White))
plot <- plot + geom_point() + scale_color_viridis()
print((plot))

opar <- par(no.readonly = TRUE)
# Include the graphical parameter
# mfrow = c(nrows, ncols) to create a matrix of 
# nrows Ã— ncols plots that are filled in by row
# Here we have 1 row by 2 cols to display our charts
par(mfrow = c(1, 3))

hist(file_data$NoQuals, main = "Histogram for NoQuals", xlab = "")
hist(file_data$L4Quals_plus, main = "Histogram for L4 qualifications +", xlab = "")
hist(file_data$MeanAge, main = "Histogram for mean adult age", xlab = "")

# Reset par values
par(opar)

# Now that we understand more about qualifications
# we'll have a look at the scatter plots for distribution
# both charts resemble each other
opar <- par(no.readonly = TRUE)
par(mfrow = c(1, 2))

plot(x = file_data$NoQuals, y = file_data$AdultMeanAge, ylab = "Adult Mean age", xlab = "No qualifications")
plot(x = file_data$L4Quals_plus, y = file_data$AdultMeanAge, ylab = "Adult mean age", xlab = "L4 qualifications+")

# --------------------------------------------------------------------------------------
# Examinig data in more detail
# --------------------------------------------------------------------------------------

# We can examine the correlations between all of the variables within the data frame
# for an overview of any positive or negative relationships
# In this example I've reduced the variable comparisions
# so we can read them on-screen

variables_of_interest <- c("AdultMeanAge", 
                           "White", 
                           "Owned", 
                           "NoQuals", 
                           "L4Quals_plus", 
                           "Unemp", 
                           "HigherOccup", 
                           "Deprived", 
                           "Proportion")
pairs(file_data[variables_of_interest])

# Reset par values
par(opar)

# Now lets look at some charts in more detail
# This graph shows "NoQuals" on the x-axis and "AdultMeanAge" on the y-axis.
# and proportion is assigned a colour. This chart shows the same information 
# as the chart above
plot <- ggplot(file_data, aes(x = NoQuals, y = AdultMeanAge, color = Proportion))
plot <- plot + stat_smooth(method = "lm", col = "darkgrey", se = FALSE)
plot <- plot + scale_color_viridis()
plot <- plot + geom_point()
print(plot)

# Interactions with correlations
# using the corrplot() function we can create 
# a matrix of correlations
# Large circles mean high correlation
# Blue circles mean positive correlation and
# red circles mean negative correlation

par(mfrow = c(1, 1))
library(corrplot)
# tl.col refers to text colour
# tl.cex refers to text size
corrplot(corr = cor(numerical_data), tl.col = "Black", tl.cex = 0.9)

# If we look at the relation among the proportion variable and the other variables, variables
# in large blue circles are positively correlated with it, meaning that the more that variable
#increases, the more likely it is for the proportion variable to also increase. For examples of
# this type, look at the relations among adult mean age and NoQuals. If we
# find large red circles among variables, it means that the more that
# variable increases, the more the other variable is likely to decrease. 
# Other examples:
# Look atlook at the relations between:
# Age_25to29 and proportion
# L$Quals_plus and Proportion
# Students and Age18to19 and also Age_20to24

# What we've learnt so far is that age, education, and ethnicity are
# important factors in understanding the way people voted in the Brexit Referendum.
# Younger people with higher education levels are related with votes in favour of remaining in
# the EU. Older white people are related with votes in favour of leaving the EU. 
# We can now use this knowledge to make a more succinct dataset that incorporates this information.
# First we add relevant variables, and then we remove non-relevant variables.

# I'm going to split the data into the following:
# 2 groups of age - below and above 45
# 2 groups of ethnicity - white and non-white
# 2 groups of education (high and low level of education)

# Below 45
file_data$Age_18to44 <- (file_data$Age_18to19 + 
                           file_data$Age_20to24 + 
                           file_data$Age_25to29 + 
                           file_data$Age_30to44)

# Above 45
file_data$Age_45_above <- (file_data$Age_45to59 + 
                             file_data$Age_60to64 + 
                             file_data$Age_65to74 + 
                             file_data$Age_75to84 + 
                             file_data$Age_85to89 + 
                             file_data$Age_90plus)

# Data for white voters already exists under "White" variable
# Creating non-white data variable
file_data$non_white <- (file_data$Black + 
                          file_data$Asian + 
                          file_data$Indian + 
                          file_data$Pakistani)

# Creating 2 education levels
file_data$High_education_level <- file_data$L4Quals_plus
file_data$Low_education_level <- file_data$NoQuals

# Now I want to remove all other data
# First I'll extract out all column names
col_names <- colnames(file_data)
col_names

# Now I'm going to build a vector that will contain TRUE for each element
# within it. The logical() command creates a logical vecotr of a specified length
# Each element of the vector is equal to FALSE. I can reverse the logic to create a vector equal to TRUE 
# for each variable in the dataframe.
?logical
# variabes_list is now a vector of the length of col_names with each element equal to TRUR
variables_list <- !logical(length(col_names))
variables_list

# Now I'll use the command "setNames" to match the column names to each element in the
# variables_list vector
?setNames
variables_list <- setNames(variables_list, col_names)
variables_list

# We want to remove all columns with the word "age" in them except for "Age_18to44" and "Age_45_above"
# We can use sapply() to run the grepl() function with a search vaue of "Age" that replaces the input value "x"

age_variables <- sapply(col_names, function(x) grepl("Age", x))
age_variables

# Next I'll set all of the elements in "variables_list" to FALSE where the word "Age" is contained in it.
# I'm using "age_variables" to do this as an indexer of when to assign "FALSE" to each element in 
# variables_list
variables_list[age_variables] <- FALSE
variables_list

# This will cause an issue right now as I've also found the word "age" in "Age_18to44" and "Age_45_above"
# variables. I'm going to set these manaully to TRUE
variables_list["Age_18to44"] <-TRUE
variables_list["Age_45_above"] <- TRUE
# And I want to keep "AdultMeanAge" variable
variables_list["AdultMeanAge"] <- TRUE

# Finally I want to remove the other variables that I combined earlier
# into 6 groups of interest
# Remove ethnicity variables
variables_list["Black"] <- FALSE
variables_list["Asian"] <- FALSE
variables_list["Indian"] <- FALSE
variables_list["Pakistani"] <- FALSE

# Remove education-related variables
variables_list["NoQuals"] <- FALSE
variables_list["L4Quals_plus"] <- FALSE

# Finally I have a vector of the variables I'd like to keep
# so I'm going to create a new data frame and then save it 
# as a csv file.
adjusted_data <- file_data[, variables_list]
nrow(adjusted_data)

# Write adjusted file as csv file for future work
write.csv(adjusted_data, file = "data_brexit_referendum_adjusted.csv")
